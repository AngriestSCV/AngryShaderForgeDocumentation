{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Angry Shader Forge DocumentationClick to Find the Product on GumroadJoin The AngryLabs Discord","text":"<p>Angry Shader Forge (ASF) is a tool for Unity that helps you author your own shader modules that integrate into Poiyomi Pro. While the final shader is a composite work and can't be freely distributed due to including Poiyomi's code the generated modules themselves are yours to use and distribute as you see fit.</p> <p>The initial release video contains enough to get you started.</p> <p> </p> <p> </p>"},{"location":"#requirements","title":"Requirements","text":"<p>Poiyomi 8 pro is required. The free version does not provide the required files and it will not be supported in the foreseeable future</p> <p>While not an actually requirement AudioLink from the Vrchat Creator Companion is highly recommended.</p>"},{"location":"#building-a-module","title":"Building A Module","text":""},{"location":"#pre-building","title":"Pre Building","text":"<p>The best way to use this tool is to find a slider or number that already exists in Poiyomi that you want to modify. Remember that you can sample from textures, sample audio link, write arbitrary logic. Your creativity is the limit.  </p> <p>After a target has been selected right click the item in the inspector and enable animation.  Then right click it again and right click \"Copy Property Name\" to copy the property name to your clipboard.</p> <p>Next right click in the project view that contains your files and go to <code>Create &gt; AngryLabs &gt; Angry Shader Forge &gt; Poiyomi Module</code>  This will create a new angrySF file that you can name. Double click it after selecting a name; this will open the module editor window or if one is already open it will open the new module in the existing window.</p> <p>Find the existing <code>Output</code> node and paste your property name into it's upper text area. Click the <code>Add Property</code> button to add this property as an available output. At this point you are ready to move on to building your shader module.</p>"},{"location":"#nodes","title":"Nodes","text":"<p>Nodes are made and edited in their own editor that comes with the tool. With it you connect them together to build up a module.  It also includes an integrated module builder, installer,  and shader generator.</p>"},{"location":"#shader-build-process","title":"Shader Build Process","text":"<p>There are 2 ways to build your module. The first is with the <code>Full Send</code> button that you can find near the top. This will build your module, make a copy of the modular shader that you have input, install your module, generate the final shader, and post process the shader.  After this you can use your shader and the module you built will be available.</p> <p>The second way is to open the Advanced panel by toggling on the Advanced Options control. This lists all of the steps required to build a shader. They each have a name and a tooltip. The full send button essentially clicks them one at a time and stops if one reports an error.</p>"},{"location":"changelog/","title":"Versions","text":""},{"location":"changelog/#v-120-masks-and-read-property","title":"v 1.2.0 Masks and Read Property","text":"<ul> <li>Added Global Mask support </li> <li>Added Read Property support</li> <li>Fixed Nodes with types selectable from a Popup from showing up incorrectly.</li> <li>Replaced code that should not be publicly accessible (in the C# sense) with a public call to AddPort   This refactoring should result in fewer graphical issues with nodes.</li> </ul>"},{"location":"changelog/#v-111-atan2","title":"v 1.1.1 Atan2","text":"<p>Added Atan2 and fixed the split node</p>"},{"location":"changelog/#v-102-initial-release","title":"v 1.0.2 Initial release","text":"<p>The initial release. </p>"},{"location":"core-concept/","title":"Deep Dive","text":""},{"location":"core-concept/#understanding-the-angry-shader-forge-conecept","title":"Understanding the Angry Shader Forge conecept","text":""},{"location":"core-concept/#modular-shaders","title":"Modular Shaders","text":"<p>Poiyomi 8 is built using the  Modular Shader System which is the key to this working. This enables creating a small snippet of functionality and essentially lets you copy paste it into the larger shader at generation time. </p>"},{"location":"core-concept/#thryeditor","title":"ThryEditor","text":"<p>This is a tool avaliable freely on github that forms the core of the Poiyomi shader lock system. This step optimize your shader by rewriting it and inlining some variables.  This can be a problem for us as after these values are inlined we can no longer modify them with our modules.  Animating a property prevents inlining and allows us to modify the value. Failure to do so with result in either a failed shader (pink) or a shader that just does not do what you expected when locked, but works fine when the shader is unlocked.</p>"},{"location":"core-concept/#poiyomis-shader","title":"Poiyomi's Shader","text":"<p>When using Poiyomi 8 pro you have access to the shader modules that are used in the development of the shader. This gives us access to the \"Modular Shader System\" bits that we need to inject new code directly into the shader using the same tools used to create the main shader. </p>"},{"location":"core-concept/#angry-shader-forge-module","title":"Angry Shader Forge Module","text":"<p>Angry Shader Forge generates <code>ShaderModules</code> in a format that is compatible with Poiyomi's shader. A module is compiled into a list of commands starting at the Output working back. This includes mangling the names of the shader variables so that they do not conflict with any other variables from other modules even if the names appear the same in the UI.</p> <p>The end result of this is that the property named in the Output module is changed at a stage in the Poiyomi shader before much has happened. This in essence allows you to have per pixel and per frame control over almost all values in the Poiyomi shader. </p> <p>Of note is that since we are modifying these values they must be animated.  The shader locking process described above will inline these properties and prevent this tool from working if they are not animated.  At this time the tool can not assist in ensure that things are locked when they should be.</p>"},{"location":"examples/","title":"Examples","text":"<p>Below is a breakdown of some of the examples in the package. Feel free to open the images into a new tab to get a better look.</p>"},{"location":"examples/#rim-light-color","title":"Rim Light Color","text":"<p>The following example graph audio links the rim light color between 2 values</p> <p> </p> <p>In this example we are defining 2 color properties, red and yellow, that will be mixed/lerped between based on audio link. There is an additional term in the lower left that adds to the value to get the default state of the music in the demo closer to the crossover for visual interest.</p> <p>As we can see the properties panel provides easy access to those values.</p> <p>Node that this example could have just as easily worked on any given color value in the shader, but rim light color was chosen as it is not possible to audio link it today.</p>"},{"location":"examples/#disolve-color","title":"Disolve color","text":"<p>This example shows using a gradient texture sampling.</p> <p> </p> <p>In this example we are using the max of the lower channels in audio link to sample a gradient texture. This enables us to change the rate of change and colors that will be used in the shader easily without rebuilding anything. Clicking on the large image bar will open up the gradient editor that comes with Poiyomi. Of note is that the textures may not be stored where you expect with his tool so be sure to move them to an appropriate directory.</p>"},{"location":"examples/#raw-text","title":"Raw Text","text":"<p>This example has no properties, but it shows how to use the raw text node. This node allows you in input raw shader code that will be inserted into the module and integrate with the rest of the node based system. </p> <p>If you look closely you will see <code>{{rock}}</code> and <code>{{pop}}</code>. These strings will be replaced with appropriately name mangled versions when the module is built. Using <code>rock</code> or <code>pop</code> without the double brackets would have resulted in a compiler error. Semi-colons are also required at the ends of lines.</p>"},{"location":"examples/#voronoi","title":"Voronoi","text":"<p>We have quite a bit going on here. We are assigning the Outer Voronoi nodes to a color we sample from a texture, and we are audio linking the Scale and Power values for the Voronoi section.  This showcases the ability to operate on many values at once in a single modules.</p>"},{"location":"examples/#hue-shifting","title":"Hue Shifting","text":"<p>This example showcases some dynamic decisions not normally available. Here we have the hue shift amount acting different under audio link and non audio link situations. To properly see this one you will need to enable and disable the audio link provider in your scene. Without audio link the rainbow caused by hue shifting slowly moves up and down the capsule. With audio link it stops moving at idle and is instead driven by the low's in the song.  This leads to an interesting effect when there is no audio link and a different one that is obviously driven by audio when it is possible.</p>"},{"location":"nodes/","title":"All Nodes","text":""},{"location":"nodes/#compare-nodes","title":"Compare Nodes","text":""},{"location":"nodes/#max-min","title":"Max / Min","text":"<p>Returns the smaller or larger of the inputs. Each component of the input is operated on seperatly.</p>"},{"location":"nodes/#lerpmixblend","title":"Lerp/Mix/Blend","text":"High detail lerp docs Here <p>Lerp between A and B inputs.</p> <p>found below showing the expected values. Lerp is a linear interpolation between the first 2 elements. A table can be This node is excelent for smoothly picking between values in a range.  </p> <p>See the link above for a detailed breakdown of exactly how this node works.</p>"},{"location":"nodes/#step","title":"Step","text":"<p>If b &gt; a return 1. Otherwise return 0.</p>"},{"location":"nodes/#smoothstep","title":"SmoothStep","text":"<p>If X &lt; Edge 1 return Edge 1. If X &gt; Edge 2 return Edge 2. Otherwise return a smoothly changing value between the two edges.</p>"},{"location":"nodes/#greater-than-less-than","title":"Greater Than &amp;  Less Than","text":"<p>Returns 1 if the condition is met. 0 otherwise. </p>"},{"location":"nodes/#math-nodes","title":"Math Nodes","text":""},{"location":"nodes/#vector-length","title":"Vector Length","text":"<p>Get the Euclidean length of the vector using the same logic found in the Pythagorean theorem.</p>"},{"location":"nodes/#add-subtract-multiply-divide","title":"Add / Subtract / Multiply / Divide","text":"<p>These math nodes preform basic math on their inputs.  The ports are always the same type and each operation takes place independently  on the components of the inputs.</p>"},{"location":"nodes/#misc","title":"Misc","text":""},{"location":"nodes/#hsv-to-rgb","title":"HSV To RGB","text":""},{"location":"nodes/#rgb-to-hsv","title":"RGB To HSV","text":"<p>Convert between (Hue Saturation Value Alpha) and (Red Green Blue Alpha)</p>"},{"location":"nodes/#combine-xyzw","title":"Combine XYZW","text":"<p>Combine several nodes into one value. Missing Values will be replaced with 0.</p>"},{"location":"nodes/#zero-extend","title":"Zero Extend","text":"<p>Extend the input to contain more values. Missing values will be replaced with 0</p>"},{"location":"nodes/#split","title":"Split","text":"<p>This node splits a multi component input into parts. The outputs dynamically change to match the avaliable  ones in the input.</p>"},{"location":"nodes/#raw-text","title":"Raw Text","text":"<p>This node allows raw shader code to be injected.  </p> <p>The top section allows you to add inputs and outputs. These values will be initialized before your code runs. The next section is a multi line text box that allows you to enter your own code. Instead of using the variables you requested wrap them in braces like <code>{{this}}</code>. This will cause your variables to have their names mangled to match the values actually present in the shader.</p> <p>In the example above the value Bang is replaced with Clang.xyxy.</p>"},{"location":"nodes/#input","title":"Input","text":""},{"location":"nodes/#time","title":"Time","text":"<p>Returns the number of seconds since the world loaded. This is not synced.</p>"},{"location":"nodes/#property","title":"Property","text":"<p>Allows creating a property that can be edited in your modules section of the material properties.  If checked the <code>Is Constant</code> checkbox will cause the value to be used directly and it will not be avaliable for editing in the inspector. </p> <p>The type of property can be selected from the dropdown. The name used in the material properties can be found and edited in the upper text box.</p>"},{"location":"nodes/#texture-poiyomi-controls","title":"Texture - Poiyomi controls","text":"<p>Create a new texture that is configured like it would be if it was a built in Poiyomi texture.</p>"},{"location":"nodes/#audiolink-simple-sample","title":"AudioLink Simple Sample","text":"<p>Sample the AudioLink intensity for individual bands at a particular point in time. Has Audio Link is 1 if audio link is active at the moment.</p>"},{"location":"nodes/#audiolink-chrono","title":"AudioLink Chrono","text":"<p>Sample the AudioLink Chrono values. The output acts roughly like time modified in the ways that the dropdowns suggest.</p>"},{"location":"nodes/#gradient","title":"Gradient","text":"<p>Create a new texture to act as a gradient including the Poiyomi built in gradient editor. </p>"},{"location":"nodes/#uvlogic","title":"UVLogic","text":"<p>Sample UVS. This provides an interface like you would expect to find on a texture.</p>"},{"location":"nodes/#global-mask","title":"Global Mask","text":"<p>This node provides access to the global masks you are use to in Poi. While there isn't much to see in the node editor the inspector uses the same dropdown that you can find in many other places in the shader.</p>"},{"location":"nodes/#read-property","title":"Read Property","text":"<p>Just as the Poi Output node allows you to write properties this node enables you to read from them. This when used with the global mask node enables you to disable your node for certian parts of the mesh.</p>"},{"location":"nodes/#trig","title":"Trig","text":""},{"location":"nodes/#sine-cosine-tangent","title":"Sine / Cosine / Tangent","text":"<p>Each of these functions takes one input in radians and returns a value according to normal trig rules.</p>"},{"location":"nodes/#arcsine-arccosine-arctangent","title":"ArcSine / ArcCosine / ArcTangent","text":"<p>Each of these functions takes one input and returns a value according to normal trig rules.</p>"},{"location":"nodes/#atan2","title":"ATan2","text":"<p>This is a specialized version of Arc Tangent that takes 2 values and can determine which angle the value belongs to. The normal Arc Tangent can't determine a diffrence between 45 and 135 degrees for instance. can give the confusing results in those cases, but <code>atan2</code> uses the fact that it gets 2 values in to diffrentiate these cases.</p>"},{"location":"nodes/#todegrees-toradians","title":"ToDegrees / ToRadians","text":"<p>Convert values between degrees and radians depending on the node selected</p>"},{"location":"nodes/#poimoduleoutput","title":"PoiModuleOutput","text":"<p>This is a special node that you can not delete or copy.</p> <p>This node is used to interact with the larger Poiyomi shader and set values used elsewhere in the shader. </p>"},{"location":"nodes/lerp/","title":"Lerp Deep Dive","text":"<p>This is the lerp node. As indicated by it's title you may want to think about it as the Mix or Blend node from other software.</p> <p>While the examples given below are only for single values each element in a vector (such as a float4 that is used for color data) is operated on independently.</p> <p>This node mixes the values between the low and high value assuming the input to <code>Factor</code> is between 0 and 1. </p>"},{"location":"nodes/lerp/#simple-examples","title":"Simple Examples","text":"<p>Above you can see an example of the outputs of Lerp where the low was 0 and the high is 1.  Notice the green area. This denotes the area where the factor is between 0 and 1. Also notice that the output follows a line that continues outside of the given range. This is not an error. </p> <p>You should either consider how to handle factor values that are out of the normal bounds or send them through a saturate to keep them in the \"normal\" bounds.</p> <p>Let's see another one.</p> <p></p> <p>In this one we are lerping from 3 to 1. Notice that the high value is less than the low value. This is fine. That just means larger factors get us a smaller value. As we can see this line also continues out of the normal bounds.</p>"}]}