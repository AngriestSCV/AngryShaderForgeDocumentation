{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Angry Shader Forge Documentation","text":"<p>Angry Shader Forge (ASF) is a tool for Unity that helps you author your own shader modules that integrate into Poiyomi Pro. While the final shader is a composite work and can't be freely distributed due to including Poiyomi's code the generated modules themselves are yours to use and distribute as you see fit.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Poiyomi 8 pro is required. The free version does not provide the required files and it will not be supported in the forseeable future</p>"},{"location":"#building-a-module","title":"Building A Module","text":""},{"location":"#pre-building","title":"Pre Building","text":"<p>The best way to use this tool is to find a slider or number that already exists in Poiyomi that you want to modify. Remember that you can sample from textures, sample audio link, write arbitrary logic. Your creativity is the limit.  </p> <p>After a target has been selected right click the item in the inspector and enable animation.  Then right click it again and right click \"Copy Property Name\" to copy the property name to your clipboard.</p> <p>Next right click in the project view that contains your files and go to <code>Create &gt; AngryLabs &gt; Angry Shader Forge &gt; Poiyomi Module</code>  This will create a new angrySF file that you can name. Double click it after selecting a name; this will open the module editor window or if one is already open it will open the new module in the existing window.</p> <p>Find the existing <code>Output</code> node and paste your property name into it's upper text area. Click the <code>Add Property</code> button to add this property as an avaliable output. At this point you are ready to move on to building your shader module.</p>"},{"location":"#nodes","title":"Nodes","text":""},{"location":"#shader-build-process","title":"Shader Build Process","text":"<p>There are 2 ways to build your module. The first is with the <code>Full Send</code> button that you can find near the top. This will build your module, make a copy of the modular shader that you have input, install your module, generate the final shader, and post process the shader.  After this you can use your shader and the module you built will be avaliable.</p> <p>The second way is to open the Advanced panel by toggling on the Advanced Options control. This lists all of the steps required to build a shader. They each have a name and a tooltip. The full send button esentially clicks them one at a time and stops if one reports an error.</p>"},{"location":"core-concept/","title":"Deep Dive","text":""},{"location":"core-concept/#understanding-the-angry-shader-forge-conecept","title":"Understanding the Angry Shader Forge conecept","text":""},{"location":"core-concept/#modular-shaders","title":"Modular Shaders","text":"<p>Poiyomi 8 is built using the  Modular Shader System which is the key to this working. This enables creating a small snippet of functionality and essentially lets you copy paste it into the larger shader at generation time. </p>"},{"location":"core-concept/#thryeditor","title":"ThryEditor","text":"<p>This is a tool avaliable freely on github that forms the core of the Poiyomi shader lock system. This step optimize your shader by rewriting it and inlining some variables.  This can be a problem for us as after these values are inlined we can no longer modify them with our modules.  Animating a property prevents inlining and allows us to modify the value. Failure to do so with result in either a failed shader (pink) or a shader that just does not do what you expected when locked, but works fine when the shader is unlocked.</p>"},{"location":"core-concept/#poiyomis-shader","title":"Poiyomi's Shader","text":"<p>When using Poiyomi 8 pro you have access to the shader modules that are used in the development of the shader. This gives us access to the \"Modular Shader System\" bits that we need to inject new code directly into the shader using the same tools used to create the main shader. </p>"},{"location":"core-concept/#angry-shader-forge-module","title":"Angry Shader Forge Module","text":"<p>Angry Shader Forge generates <code>ShaderModules</code> in a format that is compatible with Poiyomi's shader. A module is compiled into a list of commands starting at the Output working back. This includes mangling the names of the shader variables so that they do not conflict with any other variables from other modules even if the names appear the same in the UI.</p> <p>The end result of this is that the property named in the Output module is changed at a stage in the Poiyomi shader before much has happened. This in essence allows you to have per pixel and per frame control over almost all values in the Poiyomi shader. </p> <p>Of note is that since we are modifying these values they must be animated.  The shader locking process described above will inline these properties and prevent this tool from working if they are not animated.  At this time the tool can not assist in ensure that things are locked when they should be.</p>"},{"location":"nodes/","title":"Compare Nodes","text":""},{"location":"nodes/#max","title":"Max","text":""},{"location":"nodes/#min","title":"Min","text":"<p>Returns the smaller or larger of the inputs. Each component of the input is operated on seperatly.</p>"},{"location":"nodes/#lerpmixblend","title":"Lerp/Mix/Blend","text":"<p>Lerp between A and B inputs.</p> <p>found below showing the expected values. Lerp is a linear interpolation between the first 2 elements. A table can be This node is excelent for smoothly picking between values in a range.  </p> A B Factor Value 0 1 0 0 0 1 1 1 0 0 1 0 0 1 0.5 0.5 2 3 0.75 2.75"},{"location":"nodes/#step","title":"Step","text":"<p>If b &gt; a return 1. Otherwise return 0.</p>"},{"location":"nodes/#smoothstep","title":"SmoothStep","text":"<p>If X &lt; Edge 1 return Edge 1. If X &gt; Edge 2 return Edge 2. Otherwise return a smoothly changing value between the two edges.</p>"},{"location":"nodes/#greater-than","title":"Greater Than","text":""},{"location":"nodes/#less-than","title":"Less Than","text":""},{"location":"nodes/#greater-than-or-equal","title":"Greater Than or Equal","text":""},{"location":"nodes/#less-than-or-equal","title":"Less Than or Equal","text":"<p>Returns 1 if the condition is met. 0 otherwise. </p>"},{"location":"nodes/#math-nodes","title":"Math Nodes","text":""},{"location":"nodes/#vector-length","title":"Vector Length","text":"<p>Get the Euclidean length of the vector using the same logic found in the Pythagorean theorem.</p>"},{"location":"nodes/#add","title":"Add","text":""},{"location":"nodes/#subtract","title":"Subtract","text":""},{"location":"nodes/#multiply","title":"Multiply","text":""},{"location":"nodes/#divide","title":"Divide","text":"<p>These math nodes preform basic math on their inputs.  The ports are always the same type and each operation takes place independently  on the components of the inputs.</p>"},{"location":"nodes/#misc","title":"Misc","text":""},{"location":"nodes/#hsv-to-rgb","title":"HSV To RGB","text":""},{"location":"nodes/#rgb-to-hsv","title":"RGB To HSV","text":"<p>Convert between (Hue Saturation Value Alpha) and (Red Green Blue Alpha)</p>"},{"location":"nodes/#combine-xyzw","title":"Combine XYZW","text":"<p>Combine several nodes into one. Missing Values will be replaced with 0.</p>"},{"location":"nodes/#zero-extend","title":"Zero Extend","text":"<p>Extend the input to contain more values. Missing values will be replaced with 0</p>"},{"location":"nodes/#split","title":"Split","text":"<p>This node splits a multi component input into parts. The outputs dynamically change to match the avaliable  ones in the input.</p>"},{"location":"nodes/#raw-text","title":"Raw Text","text":"<p>This node allows raw shader code to be injected.  </p> <p>The top section allows you to add inputs and outputs. These values will be initilized before your code runs. The next section is a multi line text box that allows you to enter your own code. Instead of using the variables you requested wrapp them in braces like <code>{{this}}</code>. This will cause your variables to have their names mangled to match the values actually present in the shader.</p> <p>In the example below the value Bang is replaced with Clang.xyxy.</p>"},{"location":"nodes/#input","title":"Input","text":""},{"location":"nodes/#time","title":"Time","text":"<p>Returns the number of seconds since the world loaded. This is not synced.</p>"},{"location":"nodes/#property","title":"Property","text":"<p>Allows creating a property thatt can be edited in your modules section of the material properties.  If checked the <code>Is Constant</code> checkbox will cause the value to be used directly and it will not be avaliable for editing. </p> <p>The type of property can be selected from the dropdown. The name used in the material properties can be found and edited in the upper text box.</p>"},{"location":"nodes/#texture-poiyomi-controls","title":"Texture - Poiyomi controls","text":"<p>Create a new texture that is configured like it would be if it was a built in Poiyomi texture.</p>"},{"location":"nodes/#audiolink-simple-sample","title":"AudioLink Simple Sample","text":"<p>Sample the AudioLink intensity for individual bands at a particular point in time. Has Audio Link is 1 if audio link is active at the moment.</p>"},{"location":"nodes/#audiolink-chrono","title":"AudioLink Chrono","text":"<p>Sample the AudioLink Chrono values. The output acts roughly like time modified in the ways that the dropdowns suggest.</p>"},{"location":"nodes/#gradient","title":"Gradient","text":"<p>Create a new texture that to act as a gradient including the Poiyomi built in gradient editor. </p>"},{"location":"nodes/#uvlogic","title":"UVLogic","text":"<p>Sample UVS. This provides an interface like you would expect to find on a texture.</p>"},{"location":"nodes/#trig","title":"Trig","text":""},{"location":"nodes/#sine","title":"Sine","text":""},{"location":"nodes/#cosine","title":"Cosine","text":""},{"location":"nodes/#tangent","title":"Tangent","text":"<p>Each of these functions takes one input in radians and returns a value according to normal trig rules.</p>"},{"location":"nodes/#arcsine","title":"ArcSine","text":""},{"location":"nodes/#arccosine","title":"ArcCosine","text":""},{"location":"nodes/#arctangent","title":"ArcTangent","text":"<p>Each of these functions takes one input and returns a value according to normal trig rules.</p>"},{"location":"nodes/#todegrees","title":"ToDegrees","text":""},{"location":"nodes/#toradians","title":"ToRadians","text":"<p>Convert values between degrees and radians depending on the node selected</p>"},{"location":"nodes/#poimoduleoutput","title":"PoiModuleOutput","text":"<p>This is a special node that you can not delete or copy.</p> <p>This node is used to interact with the larger Poiyomi shader and set values used elsewhere in the shader. </p>"}]}